
TrafficSecurityFlasher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000540  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000540  000005d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  0080007a  0080007a  000005ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000117d  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000808  00000000  00000000  000018d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ad  00000000  00000000  000020e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000842  00000000  00000000  00002e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a03  00000000  00000000  0000369a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000409d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 bc 01 	jmp	0x378	; 0x378 <__vector_4>
  14:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_7>
  20:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__vector_8>
  24:	0c 94 8f 01 	jmp	0x31e	; 0x31e <__vector_9>
  28:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_10>
  2c:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0f 02 	call	0x41e	; 0x41e <main>
  8a:	0c 94 9e 02 	jmp	0x53c	; 0x53c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Timer1ms>:
	sLed[ePORT_PORT]->bLed4 = 1; // .. Leds ausschalten!
	
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
  92:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <sTime>
  96:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <sTime+0x1>
  9a:	9c 01       	movw	r18, r24
  9c:	2f 5f       	subi	r18, 0xFF	; 255
  9e:	3f 4f       	sbci	r19, 0xFF	; 255
  a0:	30 93 92 00 	sts	0x0092, r19	; 0x800092 <sTime+0x1>
  a4:	20 93 91 00 	sts	0x0091, r18	; 0x800091 <sTime>
  a8:	88 3e       	cpi	r24, 0xE8	; 232
  aa:	93 40       	sbci	r25, 0x03	; 3
  ac:	20 f0       	brcs	.+8      	; 0xb6 <Timer1ms+0x24>
  ae:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <sTime+0x1>
  b2:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <sTime>
  b6:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <uiDebounce>
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	98 0f       	add	r25, r24
  be:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <uiDebounce>
  c2:	89 31       	cpi	r24, 0x19	; 25
  c4:	30 f0       	brcs	.+12     	; 0xd2 <Timer1ms+0x40>
  c6:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <uiDebounce>
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 6d 02 	call	0x4da	; 0x4da <SwitchRead>
  d2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sState>
  d6:	80 ff       	sbrs	r24, 0
  d8:	3f c0       	rjmp	.+126    	; 0x158 <Timer1ms+0xc6>
  da:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sLedTime>
  de:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <sLedTime+0x1>
  e2:	9c 01       	movw	r18, r24
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	30 93 94 00 	sts	0x0094, r19	; 0x800094 <sLedTime+0x1>
  ec:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <sLedTime>
  f0:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	ee 0f       	add	r30, r30
  f8:	ff 1f       	adc	r31, r31
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e0 5a       	subi	r30, 0xA0	; 160
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	20 81       	ld	r18, Z
 104:	31 81       	ldd	r19, Z+1	; 0x01
 106:	82 17       	cp	r24, r18
 108:	93 07       	cpc	r25, r19
 10a:	c0 f4       	brcc	.+48     	; 0x13c <Timer1ms+0xaa>
 10c:	e5 e7       	ldi	r30, 0x75	; 117
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	a2 81       	ldd	r26, Z+2	; 0x02
 112:	b3 81       	ldd	r27, Z+3	; 0x03
 114:	8c 91       	ld	r24, X
 116:	8e 7f       	andi	r24, 0xFE	; 254
 118:	8c 93       	st	X, r24
 11a:	a2 81       	ldd	r26, Z+2	; 0x02
 11c:	b3 81       	ldd	r27, Z+3	; 0x03
 11e:	8c 91       	ld	r24, X
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	8c 93       	st	X, r24
 124:	a2 81       	ldd	r26, Z+2	; 0x02
 126:	b3 81       	ldd	r27, Z+3	; 0x03
 128:	8c 91       	ld	r24, X
 12a:	8b 7f       	andi	r24, 0xFB	; 251
 12c:	8c 93       	st	X, r24
 12e:	02 80       	ldd	r0, Z+2	; 0x02
 130:	f3 81       	ldd	r31, Z+3	; 0x03
 132:	e0 2d       	mov	r30, r0
 134:	80 81       	ld	r24, Z
 136:	87 7f       	andi	r24, 0xF7	; 247
 138:	80 83       	st	Z, r24
 13a:	0e c0       	rjmp	.+28     	; 0x158 <Timer1ms+0xc6>
 13c:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <sLedTime+0x1>
 140:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sLedTime>
 144:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sState>
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <sState>
 14e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sState>
 152:	82 60       	ori	r24, 0x02	; 2
 154:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <sState>
 158:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sState>
 15c:	81 ff       	sbrs	r24, 1
 15e:	3f c0       	rjmp	.+126    	; 0x1de <Timer1ms+0x14c>
 160:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <sLedTime>
 164:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <sLedTime+0x1>
 168:	9c 01       	movw	r18, r24
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	30 93 94 00 	sts	0x0094, r19	; 0x800094 <sLedTime+0x1>
 172:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <sLedTime>
 176:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <__data_end>
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
 188:	22 81       	ldd	r18, Z+2	; 0x02
 18a:	33 81       	ldd	r19, Z+3	; 0x03
 18c:	82 17       	cp	r24, r18
 18e:	93 07       	cpc	r25, r19
 190:	c0 f4       	brcc	.+48     	; 0x1c2 <Timer1ms+0x130>
 192:	e5 e7       	ldi	r30, 0x75	; 117
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	a2 81       	ldd	r26, Z+2	; 0x02
 198:	b3 81       	ldd	r27, Z+3	; 0x03
 19a:	8c 91       	ld	r24, X
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	8c 93       	st	X, r24
 1a0:	a2 81       	ldd	r26, Z+2	; 0x02
 1a2:	b3 81       	ldd	r27, Z+3	; 0x03
 1a4:	8c 91       	ld	r24, X
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	8c 93       	st	X, r24
 1aa:	a2 81       	ldd	r26, Z+2	; 0x02
 1ac:	b3 81       	ldd	r27, Z+3	; 0x03
 1ae:	8c 91       	ld	r24, X
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	8c 93       	st	X, r24
 1b4:	02 80       	ldd	r0, Z+2	; 0x02
 1b6:	f3 81       	ldd	r31, Z+3	; 0x03
 1b8:	e0 2d       	mov	r30, r0
 1ba:	80 81       	ld	r24, Z
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret
 1c2:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <sLedTime+0x1>
 1c6:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <sLedTime>
 1ca:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sState>
 1ce:	8d 7f       	andi	r24, 0xFD	; 253
 1d0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <sState>
 1d4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <sState>
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <sState>
 1de:	08 95       	ret

000001e0 <__vector_10>:
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	ef 93       	push	r30
 200:	ff 93       	push	r31
 202:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <pvTimerCallback+0x2>
 206:	f0 91 7e 00 	lds	r31, 0x007E	; 0x80007e <pvTimerCallback+0x3>
 20a:	09 95       	icall
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <__vector_11>:
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	e0 91 7b 00 	lds	r30, 0x007B	; 0x80007b <pvTimerCallback>
 254:	f0 91 7c 00 	lds	r31, 0x007C	; 0x80007c <pvTimerCallback+0x1>
 258:	09 95       	icall
 25a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <sReload>
 25e:	82 bf       	out	0x32, r24	; 50
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_7>:
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	2f 93       	push	r18
 28e:	3f 93       	push	r19
 290:	4f 93       	push	r20
 292:	5f 93       	push	r21
 294:	6f 93       	push	r22
 296:	7f 93       	push	r23
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
 29c:	af 93       	push	r26
 29e:	bf 93       	push	r27
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <pvTimerCallback+0xc>
 2a8:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <pvTimerCallback+0xd>
 2ac:	09 95       	icall
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	bf 91       	pop	r27
 2b4:	af 91       	pop	r26
 2b6:	9f 91       	pop	r25
 2b8:	8f 91       	pop	r24
 2ba:	7f 91       	pop	r23
 2bc:	6f 91       	pop	r22
 2be:	5f 91       	pop	r21
 2c0:	4f 91       	pop	r20
 2c2:	3f 91       	pop	r19
 2c4:	2f 91       	pop	r18
 2c6:	0f 90       	pop	r0
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	0f 90       	pop	r0
 2cc:	1f 90       	pop	r1
 2ce:	18 95       	reti

000002d0 <__vector_8>:
 2d0:	1f 92       	push	r1
 2d2:	0f 92       	push	r0
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	0f 92       	push	r0
 2d8:	11 24       	eor	r1, r1
 2da:	2f 93       	push	r18
 2dc:	3f 93       	push	r19
 2de:	4f 93       	push	r20
 2e0:	5f 93       	push	r21
 2e2:	6f 93       	push	r22
 2e4:	7f 93       	push	r23
 2e6:	8f 93       	push	r24
 2e8:	9f 93       	push	r25
 2ea:	af 93       	push	r26
 2ec:	bf 93       	push	r27
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
 2f2:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <pvTimerCallback+0xa>
 2f6:	f0 91 86 00 	lds	r31, 0x0086	; 0x800086 <pvTimerCallback+0xb>
 2fa:	09 95       	icall
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	bf 91       	pop	r27
 302:	af 91       	pop	r26
 304:	9f 91       	pop	r25
 306:	8f 91       	pop	r24
 308:	7f 91       	pop	r23
 30a:	6f 91       	pop	r22
 30c:	5f 91       	pop	r21
 30e:	4f 91       	pop	r20
 310:	3f 91       	pop	r19
 312:	2f 91       	pop	r18
 314:	0f 90       	pop	r0
 316:	0f be       	out	0x3f, r0	; 63
 318:	0f 90       	pop	r0
 31a:	1f 90       	pop	r1
 31c:	18 95       	reti

0000031e <__vector_9>:
 31e:	1f 92       	push	r1
 320:	0f 92       	push	r0
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	0f 92       	push	r0
 326:	11 24       	eor	r1, r1
 328:	2f 93       	push	r18
 32a:	3f 93       	push	r19
 32c:	4f 93       	push	r20
 32e:	5f 93       	push	r21
 330:	6f 93       	push	r22
 332:	7f 93       	push	r23
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
 338:	af 93       	push	r26
 33a:	bf 93       	push	r27
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
 340:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <pvTimerCallback+0x8>
 344:	f0 91 84 00 	lds	r31, 0x0084	; 0x800084 <pvTimerCallback+0x9>
 348:	09 95       	icall
 34a:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <sReload+0x4>
 34e:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <sReload+0x5>
 352:	9d bd       	out	0x2d, r25	; 45
 354:	8c bd       	out	0x2c, r24	; 44
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_4>:
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	2f 93       	push	r18
 384:	3f 93       	push	r19
 386:	4f 93       	push	r20
 388:	5f 93       	push	r21
 38a:	6f 93       	push	r22
 38c:	7f 93       	push	r23
 38e:	8f 93       	push	r24
 390:	9f 93       	push	r25
 392:	af 93       	push	r26
 394:	bf 93       	push	r27
 396:	ef 93       	push	r30
 398:	ff 93       	push	r31
 39a:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <pvTimerCallback+0x10>
 39e:	f0 91 8c 00 	lds	r31, 0x008C	; 0x80008c <pvTimerCallback+0x11>
 3a2:	09 95       	icall
 3a4:	ff 91       	pop	r31
 3a6:	ef 91       	pop	r30
 3a8:	bf 91       	pop	r27
 3aa:	af 91       	pop	r26
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	7f 91       	pop	r23
 3b2:	6f 91       	pop	r22
 3b4:	5f 91       	pop	r21
 3b6:	4f 91       	pop	r20
 3b8:	3f 91       	pop	r19
 3ba:	2f 91       	pop	r18
 3bc:	0f 90       	pop	r0
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	0f 90       	pop	r0
 3c2:	1f 90       	pop	r1
 3c4:	18 95       	reti

000003c6 <__vector_5>:
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	2f 93       	push	r18
 3d2:	3f 93       	push	r19
 3d4:	4f 93       	push	r20
 3d6:	5f 93       	push	r21
 3d8:	6f 93       	push	r22
 3da:	7f 93       	push	r23
 3dc:	8f 93       	push	r24
 3de:	9f 93       	push	r25
 3e0:	af 93       	push	r26
 3e2:	bf 93       	push	r27
 3e4:	ef 93       	push	r30
 3e6:	ff 93       	push	r31
 3e8:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <pvTimerCallback+0xe>
 3ec:	f0 91 8a 00 	lds	r31, 0x008A	; 0x80008a <pvTimerCallback+0xf>
 3f0:	09 95       	icall
 3f2:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <sReload+0x7>
 3f6:	90 91 9e 00 	lds	r25, 0x009E	; 0x80009e <sReload+0x8>
 3fa:	84 bd       	out	0x24, r24	; 36
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <main>:



int main(void)
{
	SwitchInit( &sKey , &KEY_PORT , 1<<KEY_BP , 1<<KEY_BP , 0 );
 41e:	00 e0       	ldi	r16, 0x00	; 0
 420:	28 e0       	ldi	r18, 0x08	; 8
 422:	48 e0       	ldi	r20, 0x08	; 8
 424:	65 e3       	ldi	r22, 0x35	; 53
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	8f e9       	ldi	r24, 0x9F	; 159
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <SwitchInit>
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	#if defined( __AVR_ATmega328P__ ) || defined( __AVR_ATmega32__ )

		extern inline enum eTimerError Timer0CompInit	( const sTimer8Config_t *psTab , void (*pFncCallback)(void) )	
	{
		cli(); /**< Vorsichtshalber Interrupts global sperren */
 430:	f8 94       	cli
		{
			sei();
			return ERROR_TIMER_NO_ADDRESS;
		}else
		{
			pvTimerCallback[CALLBACK_TIMER0_COMP] = pFncCallback;
 432:	89 e4       	ldi	r24, 0x49	; 73
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <pvTimerCallback+0x3>
 43a:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <pvTimerCallback+0x2>
		}
	
		#if defined  ( __AVR_ATmega32__ )	
			TCCR0_WGM_CS( psTab->uiWGMxx , psTab->uiCSxx );
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	8b 60       	ori	r24, 0x0B	; 11
 442:	83 bf       	out	0x33, r24	; 51
			OCR0 = psTab->uiCnt;
 444:	8c e7       	ldi	r24, 0x7C	; 124
 446:	8c bf       	out	0x3c, r24	; 60
			TIMSK_OCIE0_EN;	
 448:	89 b7       	in	r24, 0x39	; 57
 44a:	82 60       	ori	r24, 0x02	; 2
 44c:	89 bf       	out	0x39, r24	; 57
		#endif
	
		sei();
 44e:	78 94       	sei
	
	Timer0CompInit( &sTimer0OcieSettings[2] , Timer1ms );

//	wdt_enable( WDTO_500MS );

	sLed[ePORT_DDR]->bLed1 = 1;
 450:	e5 e7       	ldi	r30, 0x75	; 117
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	a0 81       	ld	r26, Z
 456:	b1 81       	ldd	r27, Z+1	; 0x01
 458:	8c 91       	ld	r24, X
 45a:	81 60       	ori	r24, 0x01	; 1
 45c:	8c 93       	st	X, r24
	sLed[ePORT_DDR]->bLed2 = 1;
 45e:	a0 81       	ld	r26, Z
 460:	b1 81       	ldd	r27, Z+1	; 0x01
 462:	8c 91       	ld	r24, X
 464:	82 60       	ori	r24, 0x02	; 2
 466:	8c 93       	st	X, r24
	sLed[ePORT_DDR]->bLed3 = 1;
 468:	a0 81       	ld	r26, Z
 46a:	b1 81       	ldd	r27, Z+1	; 0x01
 46c:	8c 91       	ld	r24, X
 46e:	84 60       	ori	r24, 0x04	; 4
 470:	8c 93       	st	X, r24
	sLed[ePORT_DDR]->bLed4 = 1;
 472:	01 90       	ld	r0, Z+
 474:	f0 81       	ld	r31, Z
 476:	e0 2d       	mov	r30, r0
 478:	80 81       	ld	r24, Z
 47a:	88 60       	ori	r24, 0x08	; 8
 47c:	80 83       	st	Z, r24

    while (1) 
    {
		if ( SwitchGet( &sKey , 1<<KEY_BP ) )
 47e:	68 e0       	ldi	r22, 0x08	; 8
 480:	8f e9       	ldi	r24, 0x9F	; 159
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 94 02 	call	0x528	; 0x528 <SwitchGet>
 488:	88 23       	and	r24, r24
 48a:	c9 f3       	breq	.-14     	; 0x47e <main+0x60>
		{
			if ( uiLedCnfgIndex++ > 6 )
 48c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	98 0f       	add	r25, r24
 494:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__data_end>
 498:	87 30       	cpi	r24, 0x07	; 7
 49a:	88 f3       	brcs	.-30     	; 0x47e <main+0x60>
			{
				uiLedCnfgIndex = 0;
 49c:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__data_end>
 4a0:	ee cf       	rjmp	.-36     	; 0x47e <main+0x60>

000004a2 <SwitchInit>:
	uiKeyMask &= psSwitch->uiRepeat;
	psSwitch->uiRepeat ^= uiKeyMask;
	sei();

	return uiKeyMask;
}
 4a2:	0f 93       	push	r16
 4a4:	fc 01       	movw	r30, r24
 4a6:	61 15       	cp	r22, r1
 4a8:	71 05       	cpc	r23, r1
 4aa:	a1 f0       	breq	.+40     	; 0x4d4 <SwitchInit+0x32>
 4ac:	db 01       	movw	r26, r22
 4ae:	8e 91       	ld	r24, -X
 4b0:	94 2f       	mov	r25, r20
 4b2:	90 95       	com	r25
 4b4:	89 23       	and	r24, r25
 4b6:	8c 93       	st	X, r24
 4b8:	db 01       	movw	r26, r22
 4ba:	8c 91       	ld	r24, X
 4bc:	28 2b       	or	r18, r24
 4be:	2c 93       	st	X, r18
 4c0:	71 83       	std	Z+1, r23	; 0x01
 4c2:	60 83       	st	Z, r22
 4c4:	45 83       	std	Z+5, r20	; 0x05
 4c6:	13 82       	std	Z+3, r1	; 0x03
 4c8:	12 82       	std	Z+2, r1	; 0x02
 4ca:	14 82       	std	Z+4, r1	; 0x04
 4cc:	16 82       	std	Z+6, r1	; 0x06
 4ce:	07 83       	std	Z+7, r16	; 0x07
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	01 c0       	rjmp	.+2      	; 0x4d6 <SwitchInit+0x34>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0f 91       	pop	r16
 4d8:	08 95       	ret

000004da <SwitchRead>:
 4da:	fc 01       	movw	r30, r24
 4dc:	a0 81       	ld	r26, Z
 4de:	b1 81       	ldd	r27, Z+1	; 0x01
 4e0:	12 97       	sbiw	r26, 0x02	; 2
 4e2:	8c 91       	ld	r24, X
 4e4:	80 95       	com	r24
 4e6:	95 81       	ldd	r25, Z+5	; 0x05
 4e8:	89 23       	and	r24, r25
 4ea:	82 83       	std	Z+2, r24	; 0x02
 4ec:	93 81       	ldd	r25, Z+3	; 0x03
 4ee:	89 17       	cp	r24, r25
 4f0:	41 f0       	breq	.+16     	; 0x502 <SwitchRead+0x28>
 4f2:	90 95       	com	r25
 4f4:	98 23       	and	r25, r24
 4f6:	24 81       	ldd	r18, Z+4	; 0x04
 4f8:	92 2b       	or	r25, r18
 4fa:	94 83       	std	Z+4, r25	; 0x04
 4fc:	94 e6       	ldi	r25, 0x64	; 100
 4fe:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <uiRepeat>
 502:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <uiRepeat>
 506:	91 50       	subi	r25, 0x01	; 1
 508:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <uiRepeat>
 50c:	91 11       	cpse	r25, r1
 50e:	09 c0       	rjmp	.+18     	; 0x522 <SwitchRead+0x48>
 510:	97 81       	ldd	r25, Z+7	; 0x07
 512:	98 23       	and	r25, r24
 514:	31 f0       	breq	.+12     	; 0x522 <SwitchRead+0x48>
 516:	25 e0       	ldi	r18, 0x05	; 5
 518:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <uiRepeat>
 51c:	26 81       	ldd	r18, Z+6	; 0x06
 51e:	92 2b       	or	r25, r18
 520:	96 83       	std	Z+6, r25	; 0x06
 522:	83 83       	std	Z+3, r24	; 0x03
 524:	84 81       	ldd	r24, Z+4	; 0x04
 526:	08 95       	ret

00000528 <SwitchGet>:

uint8_t SwitchGet( sSwitch_t *psSwitch , uint8_t uiKeyMask )
{
 528:	fc 01       	movw	r30, r24
	uint8_t uiInfo;
	
	cli();
 52a:	f8 94       	cli
	uiInfo = psSwitch->uiInfo;
 52c:	84 81       	ldd	r24, Z+4	; 0x04
	psSwitch->uiInfo &= ~uiKeyMask;
 52e:	96 2f       	mov	r25, r22
 530:	90 95       	com	r25
 532:	98 23       	and	r25, r24
 534:	94 83       	std	Z+4, r25	; 0x04
	sei();
 536:	78 94       	sei
	
	return ( uiInfo & uiKeyMask );
}
 538:	86 23       	and	r24, r22
 53a:	08 95       	ret

0000053c <_exit>:
 53c:	f8 94       	cli

0000053e <__stop_program>:
 53e:	ff cf       	rjmp	.-2      	; 0x53e <__stop_program>
