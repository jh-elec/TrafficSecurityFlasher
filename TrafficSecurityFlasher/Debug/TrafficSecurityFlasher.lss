
TrafficSecurityFlasher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000002a2  00000336  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080007e  0080007e  00000354  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9b  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000603  00000000  00000000  00000fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b7  00000000  00000000  000015e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c0  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000023c  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000247c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 ea       	ldi	r30, 0xA2	; 162
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	ae 37       	cpi	r26, 0x7E	; 126
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	ae e7       	ldi	r26, 0x7E	; 126
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a5 39       	cpi	r26, 0x95	; 149
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	a8 d0       	rcall	.+336    	; 0x194 <main>
  44:	2c c1       	rjmp	.+600    	; 0x29e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <Timer1ms>:
	sLed[ePORT_PORT]->bLed4 = 1; // .. Leds ausschalten!
	
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
  48:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <sTime>
  4c:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <sTime+0x1>
  50:	9c 01       	movw	r18, r24
  52:	2f 5f       	subi	r18, 0xFF	; 255
  54:	3f 4f       	sbci	r19, 0xFF	; 255
  56:	30 93 86 00 	sts	0x0086, r19	; 0x800086 <sTime+0x1>
  5a:	20 93 85 00 	sts	0x0085, r18	; 0x800085 <sTime>
  5e:	88 3e       	cpi	r24, 0xE8	; 232
  60:	93 40       	sbci	r25, 0x03	; 3
  62:	20 f0       	brcs	.+8      	; 0x6c <Timer1ms+0x24>
  64:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <sTime+0x1>
  68:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <sTime>
  6c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <uiDebounce>
  70:	91 e0       	ldi	r25, 0x01	; 1
  72:	98 0f       	add	r25, r24
  74:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <uiDebounce>
  78:	89 31       	cpi	r24, 0x19	; 25
  7a:	28 f0       	brcs	.+10     	; 0x86 <Timer1ms+0x3e>
  7c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <uiDebounce>
  80:	8d e8       	ldi	r24, 0x8D	; 141
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	db d0       	rcall	.+438    	; 0x23c <SwitchRead>
  86:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
  8a:	80 ff       	sbrs	r24, 0
  8c:	3f c0       	rjmp	.+126    	; 0x10c <__stack+0x6d>
  8e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <sLedTime>
  92:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <sLedTime+0x1>
  96:	9c 01       	movw	r18, r24
  98:	2f 5f       	subi	r18, 0xFF	; 255
  9a:	3f 4f       	sbci	r19, 0xFF	; 255
  9c:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <sLedTime+0x1>
  a0:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <sLedTime>
  a4:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <__data_end>
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	ee 0f       	add	r30, r30
  ac:	ff 1f       	adc	r31, r31
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e0 5a       	subi	r30, 0xA0	; 160
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	20 81       	ld	r18, Z
  b8:	31 81       	ldd	r19, Z+1	; 0x01
  ba:	82 17       	cp	r24, r18
  bc:	93 07       	cpc	r25, r19
  be:	c0 f4       	brcc	.+48     	; 0xf0 <__stack+0x51>
  c0:	e9 e7       	ldi	r30, 0x79	; 121
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	a2 81       	ldd	r26, Z+2	; 0x02
  c6:	b3 81       	ldd	r27, Z+3	; 0x03
  c8:	8c 91       	ld	r24, X
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	8c 93       	st	X, r24
  ce:	a2 81       	ldd	r26, Z+2	; 0x02
  d0:	b3 81       	ldd	r27, Z+3	; 0x03
  d2:	8c 91       	ld	r24, X
  d4:	8d 7f       	andi	r24, 0xFD	; 253
  d6:	8c 93       	st	X, r24
  d8:	a2 81       	ldd	r26, Z+2	; 0x02
  da:	b3 81       	ldd	r27, Z+3	; 0x03
  dc:	8c 91       	ld	r24, X
  de:	8b 7f       	andi	r24, 0xFB	; 251
  e0:	8c 93       	st	X, r24
  e2:	02 80       	ldd	r0, Z+2	; 0x02
  e4:	f3 81       	ldd	r31, Z+3	; 0x03
  e6:	e0 2d       	mov	r30, r0
  e8:	80 81       	ld	r24, Z
  ea:	87 7f       	andi	r24, 0xF7	; 247
  ec:	80 83       	st	Z, r24
  ee:	0e c0       	rjmp	.+28     	; 0x10c <__stack+0x6d>
  f0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <sLedTime+0x1>
  f4:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <sLedTime>
  f8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
  fc:	8e 7f       	andi	r24, 0xFE	; 254
  fe:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
 102:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
 106:	82 60       	ori	r24, 0x02	; 2
 108:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
 10c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
 110:	81 ff       	sbrs	r24, 1
 112:	3f c0       	rjmp	.+126    	; 0x192 <__stack+0xf3>
 114:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <sLedTime>
 118:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <sLedTime+0x1>
 11c:	9c 01       	movw	r18, r24
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	30 93 88 00 	sts	0x0088, r19	; 0x800088 <sLedTime+0x1>
 126:	20 93 87 00 	sts	0x0087, r18	; 0x800087 <sLedTime>
 12a:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <__data_end>
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e0 5a       	subi	r30, 0xA0	; 160
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	22 81       	ldd	r18, Z+2	; 0x02
 13e:	33 81       	ldd	r19, Z+3	; 0x03
 140:	82 17       	cp	r24, r18
 142:	93 07       	cpc	r25, r19
 144:	c0 f4       	brcc	.+48     	; 0x176 <__stack+0xd7>
 146:	e9 e7       	ldi	r30, 0x79	; 121
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	a2 81       	ldd	r26, Z+2	; 0x02
 14c:	b3 81       	ldd	r27, Z+3	; 0x03
 14e:	8c 91       	ld	r24, X
 150:	81 60       	ori	r24, 0x01	; 1
 152:	8c 93       	st	X, r24
 154:	a2 81       	ldd	r26, Z+2	; 0x02
 156:	b3 81       	ldd	r27, Z+3	; 0x03
 158:	8c 91       	ld	r24, X
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	8c 93       	st	X, r24
 15e:	a2 81       	ldd	r26, Z+2	; 0x02
 160:	b3 81       	ldd	r27, Z+3	; 0x03
 162:	8c 91       	ld	r24, X
 164:	84 60       	ori	r24, 0x04	; 4
 166:	8c 93       	st	X, r24
 168:	02 80       	ldd	r0, Z+2	; 0x02
 16a:	f3 81       	ldd	r31, Z+3	; 0x03
 16c:	e0 2d       	mov	r30, r0
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
 174:	08 95       	ret
 176:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <sLedTime+0x1>
 17a:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <sLedTime>
 17e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
 182:	8d 7f       	andi	r24, 0xFD	; 253
 184:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
 188:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
 18c:	81 60       	ori	r24, 0x01	; 1
 18e:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
 192:	08 95       	ret

00000194 <main>:



int main(void)
{
	SwitchInit( &sKey , &KEY_PORT , 1<<KEY_BP , 1<<KEY_BP , 0 );
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	28 e0       	ldi	r18, 0x08	; 8
 198:	48 e0       	ldi	r20, 0x08	; 8
 19a:	68 e3       	ldi	r22, 0x38	; 56
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	8d e8       	ldi	r24, 0x8D	; 141
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	30 d0       	rcall	.+96     	; 0x204 <SwitchInit>

	#if defined( __AVR_ATmega328P__ ) || defined( __AVR_ATmega32__ ) || defined( __AVR_ATtiny13A__ )

		extern inline enum eTimerError Timer0CompAInit	( const sTimer8Config_t *psTab , void (*pFncCallback)(void) )	
		{
			cli(); /**< Vorsichtshalber Interrupts global sperren */
 1a4:	f8 94       	cli
			{
				sei();
				return ERROR_TIMER_NO_ADDRESS;
			}else
			{
				pvTimerCallback[CALLBACK_TIMER0_COMPA] = pFncCallback;
 1a6:	84 e2       	ldi	r24, 0x24	; 36
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <pvTimerCallback+0x3>
 1ae:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <pvTimerCallback+0x2>
				TCCR1B_WGM_CS( psTab->uiWGMxx , psTab->uiCSxx );
				OCR0A = psTab->uiCnt;
				TIMSK0_OCIE0A_EN;
			#endif
	
			sei();
 1b2:	78 94       	sei
	
	Timer0CompAInit( &sTimer0OcieSettings[2] , Timer1ms );

	sLed[ePORT_DDR]->bLed1 = 1;
 1b4:	e9 e7       	ldi	r30, 0x79	; 121
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	a0 81       	ld	r26, Z
 1ba:	b1 81       	ldd	r27, Z+1	; 0x01
 1bc:	8c 91       	ld	r24, X
 1be:	81 60       	ori	r24, 0x01	; 1
 1c0:	8c 93       	st	X, r24
	sLed[ePORT_DDR]->bLed2 = 1;
 1c2:	a0 81       	ld	r26, Z
 1c4:	b1 81       	ldd	r27, Z+1	; 0x01
 1c6:	8c 91       	ld	r24, X
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	8c 93       	st	X, r24
	sLed[ePORT_DDR]->bLed3 = 1;
 1cc:	a0 81       	ld	r26, Z
 1ce:	b1 81       	ldd	r27, Z+1	; 0x01
 1d0:	8c 91       	ld	r24, X
 1d2:	84 60       	ori	r24, 0x04	; 4
 1d4:	8c 93       	st	X, r24
	sLed[ePORT_DDR]->bLed4 = 1;
 1d6:	01 90       	ld	r0, Z+
 1d8:	f0 81       	ld	r31, Z
 1da:	e0 2d       	mov	r30, r0
 1dc:	80 81       	ld	r24, Z
 1de:	88 60       	ori	r24, 0x08	; 8
 1e0:	80 83       	st	Z, r24

    while (1) 
    {
		if ( SwitchGet( &sKey , 1<<KEY_BP ) )
 1e2:	68 e0       	ldi	r22, 0x08	; 8
 1e4:	8d e8       	ldi	r24, 0x8D	; 141
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	50 d0       	rcall	.+160    	; 0x28a <SwitchGet>
 1ea:	88 23       	and	r24, r24
 1ec:	d1 f3       	breq	.-12     	; 0x1e2 <main+0x4e>
		{
			if ( uiLedCnfgIndex++ > 6 )
 1ee:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__data_end>
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	98 0f       	add	r25, r24
 1f6:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__data_end>
 1fa:	87 30       	cpi	r24, 0x07	; 7
 1fc:	90 f3       	brcs	.-28     	; 0x1e2 <main+0x4e>
			{
				uiLedCnfgIndex = 0;
 1fe:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__data_end>
 202:	ef cf       	rjmp	.-34     	; 0x1e2 <main+0x4e>

00000204 <SwitchInit>:
	uiKeyMask &= psSwitch->uiRepeat;
	psSwitch->uiRepeat ^= uiKeyMask;
	sei();

	return uiKeyMask;
}
 204:	0f 93       	push	r16
 206:	fc 01       	movw	r30, r24
 208:	61 15       	cp	r22, r1
 20a:	71 05       	cpc	r23, r1
 20c:	a1 f0       	breq	.+40     	; 0x236 <SwitchInit+0x32>
 20e:	db 01       	movw	r26, r22
 210:	8e 91       	ld	r24, -X
 212:	94 2f       	mov	r25, r20
 214:	90 95       	com	r25
 216:	89 23       	and	r24, r25
 218:	8c 93       	st	X, r24
 21a:	db 01       	movw	r26, r22
 21c:	8c 91       	ld	r24, X
 21e:	28 2b       	or	r18, r24
 220:	2c 93       	st	X, r18
 222:	71 83       	std	Z+1, r23	; 0x01
 224:	60 83       	st	Z, r22
 226:	45 83       	std	Z+5, r20	; 0x05
 228:	13 82       	std	Z+3, r1	; 0x03
 22a:	12 82       	std	Z+2, r1	; 0x02
 22c:	14 82       	std	Z+4, r1	; 0x04
 22e:	16 82       	std	Z+6, r1	; 0x06
 230:	07 83       	std	Z+7, r16	; 0x07
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	01 c0       	rjmp	.+2      	; 0x238 <SwitchInit+0x34>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <SwitchRead>:
 23c:	fc 01       	movw	r30, r24
 23e:	a0 81       	ld	r26, Z
 240:	b1 81       	ldd	r27, Z+1	; 0x01
 242:	12 97       	sbiw	r26, 0x02	; 2
 244:	8c 91       	ld	r24, X
 246:	80 95       	com	r24
 248:	95 81       	ldd	r25, Z+5	; 0x05
 24a:	89 23       	and	r24, r25
 24c:	82 83       	std	Z+2, r24	; 0x02
 24e:	93 81       	ldd	r25, Z+3	; 0x03
 250:	89 17       	cp	r24, r25
 252:	41 f0       	breq	.+16     	; 0x264 <SwitchRead+0x28>
 254:	90 95       	com	r25
 256:	98 23       	and	r25, r24
 258:	24 81       	ldd	r18, Z+4	; 0x04
 25a:	92 2b       	or	r25, r18
 25c:	94 83       	std	Z+4, r25	; 0x04
 25e:	94 e6       	ldi	r25, 0x64	; 100
 260:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <uiRepeat>
 264:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <uiRepeat>
 268:	91 50       	subi	r25, 0x01	; 1
 26a:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <uiRepeat>
 26e:	91 11       	cpse	r25, r1
 270:	09 c0       	rjmp	.+18     	; 0x284 <SwitchRead+0x48>
 272:	97 81       	ldd	r25, Z+7	; 0x07
 274:	98 23       	and	r25, r24
 276:	31 f0       	breq	.+12     	; 0x284 <SwitchRead+0x48>
 278:	25 e0       	ldi	r18, 0x05	; 5
 27a:	20 93 7d 00 	sts	0x007D, r18	; 0x80007d <uiRepeat>
 27e:	26 81       	ldd	r18, Z+6	; 0x06
 280:	92 2b       	or	r25, r18
 282:	96 83       	std	Z+6, r25	; 0x06
 284:	83 83       	std	Z+3, r24	; 0x03
 286:	84 81       	ldd	r24, Z+4	; 0x04
 288:	08 95       	ret

0000028a <SwitchGet>:

uint8_t SwitchGet( sSwitch_t *psSwitch , uint8_t uiKeyMask )
{
 28a:	fc 01       	movw	r30, r24
	uint8_t uiInfo;
	
	cli();
 28c:	f8 94       	cli
	uiInfo = psSwitch->uiInfo;
 28e:	84 81       	ldd	r24, Z+4	; 0x04
	psSwitch->uiInfo &= ~uiKeyMask;
 290:	96 2f       	mov	r25, r22
 292:	90 95       	com	r25
 294:	98 23       	and	r25, r24
 296:	94 83       	std	Z+4, r25	; 0x04
	sei();
 298:	78 94       	sei
	
	return ( uiInfo & uiKeyMask );
}
 29a:	86 23       	and	r24, r22
 29c:	08 95       	ret

0000029e <_exit>:
 29e:	f8 94       	cli

000002a0 <__stop_program>:
 2a0:	ff cf       	rjmp	.-2      	; 0x2a0 <__stop_program>
