
TrafficSecurityFlasher.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000045e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000045e  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  0080007c  0080007c  0000050e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121f  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f0  00000000  00000000  00001883  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000845  00000000  00000000  00002173  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000025c  00000000  00000000  000029b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000081f  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ab  00000000  00000000  00003433  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	ef c0       	rjmp	.+478    	; 0x1ea <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	9c c0       	rjmp	.+312    	; 0x14e <__vector_10>
  16:	c2 c0       	rjmp	.+388    	; 0x19c <__vector_11>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee e5       	ldi	r30, 0x5E	; 94
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 37       	cpi	r26, 0x7C	; 124
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	ac e7       	ldi	r26, 0x7C	; 124
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ae 39       	cpi	r26, 0x9E	; 158
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	f6 d0       	rcall	.+492    	; 0x23e <main>
  52:	03 c2       	rjmp	.+1030   	; 0x45a <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <Timer1ms>:
	cli();
	
	sleep_enable();
	sei();
	sleep_cpu();
	sleep_disable();
  56:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <sTime>
  5a:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <sTime+0x1>
  5e:	9c 01       	movw	r18, r24
  60:	2f 5f       	subi	r18, 0xFF	; 255
  62:	3f 4f       	sbci	r19, 0xFF	; 255
  64:	30 93 8c 00 	sts	0x008C, r19	; 0x80008c <sTime+0x1>
  68:	20 93 8b 00 	sts	0x008B, r18	; 0x80008b <sTime>
  6c:	88 3e       	cpi	r24, 0xE8	; 232
  6e:	93 40       	sbci	r25, 0x03	; 3
  70:	20 f0       	brcs	.+8      	; 0x7a <Timer1ms+0x24>
  72:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <sTime+0x1>
  76:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <sTime>
  7a:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <uiDebounce>
  7e:	91 e0       	ldi	r25, 0x01	; 1
  80:	98 0f       	add	r25, r24
  82:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <uiDebounce>
  86:	89 31       	cpi	r24, 0x19	; 25
  88:	28 f0       	brcs	.+10     	; 0x94 <Timer1ms+0x3e>
  8a:	10 92 8f 00 	sts	0x008F, r1	; 0x80008f <uiDebounce>
  8e:	86 e9       	ldi	r24, 0x96	; 150
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	b2 d1       	rcall	.+868    	; 0x3f8 <SwitchRead>
  94:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
  98:	80 ff       	sbrs	r24, 0
  9a:	27 c0       	rjmp	.+78     	; 0xea <Timer1ms+0x94>
  9c:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sLedTime>
  a0:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <sLedTime+0x1>
  a4:	9c 01       	movw	r18, r24
  a6:	2f 5f       	subi	r18, 0xFF	; 255
  a8:	3f 4f       	sbci	r19, 0xFF	; 255
  aa:	30 93 8e 00 	sts	0x008E, r19	; 0x80008e <sLedTime+0x1>
  ae:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <sLedTime>
  b2:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <uiLedCnfgIndex>
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ee 0f       	add	r30, r30
  be:	ff 1f       	adc	r31, r31
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	20 81       	ld	r18, Z
  c6:	31 81       	ldd	r19, Z+1	; 0x01
  c8:	82 17       	cp	r24, r18
  ca:	93 07       	cpc	r25, r19
  cc:	70 f0       	brcs	.+28     	; 0xea <Timer1ms+0x94>
  ce:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <sLedTime+0x1>
  d2:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <sLedTime>
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
  da:	8e 7f       	andi	r24, 0xFE	; 254
  dc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
  e4:	82 60       	ori	r24, 0x02	; 2
  e6:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
  ea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
  ee:	81 ff       	sbrs	r24, 1
  f0:	27 c0       	rjmp	.+78     	; 0x140 <Timer1ms+0xea>
  f2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <sLedTime>
  f6:	90 91 8e 00 	lds	r25, 0x008E	; 0x80008e <sLedTime+0x1>
  fa:	9c 01       	movw	r18, r24
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	30 93 8e 00 	sts	0x008E, r19	; 0x80008e <sLedTime+0x1>
 104:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <sLedTime>
 108:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <uiLedCnfgIndex>
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	e0 5a       	subi	r30, 0xA0	; 160
 118:	ff 4f       	sbci	r31, 0xFF	; 255
 11a:	22 81       	ldd	r18, Z+2	; 0x02
 11c:	33 81       	ldd	r19, Z+3	; 0x03
 11e:	82 17       	cp	r24, r18
 120:	93 07       	cpc	r25, r19
 122:	70 f0       	brcs	.+28     	; 0x140 <Timer1ms+0xea>
 124:	10 92 8e 00 	sts	0x008E, r1	; 0x80008e <sLedTime+0x1>
 128:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <sLedTime>
 12c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
 130:	8d 7f       	andi	r24, 0xFD	; 253
 132:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
 136:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <sState>
 13a:	81 60       	ori	r24, 0x01	; 1
 13c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <sState>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	29 d1       	rcall	.+594    	; 0x396 <ShiftRegGet>
 144:	a8 2f       	mov	r26, r24
 146:	cb 01       	movw	r24, r22
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	bb d0       	rcall	.+374    	; 0x2c2 <ShiftRegSend>
 14c:	08 95       	ret

0000014e <__vector_10>:
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
 170:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <pvTimerCallback+0x2>
 174:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <pvTimerCallback+0x3>
 178:	09 95       	icall
 17a:	ff 91       	pop	r31
 17c:	ef 91       	pop	r30
 17e:	bf 91       	pop	r27
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_11>:
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	bf 93       	push	r27
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
 1be:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <pvTimerCallback+0x4>
 1c2:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <pvTimerCallback+0x5>
 1c6:	09 95       	icall
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	7f 91       	pop	r23
 1d6:	6f 91       	pop	r22
 1d8:	5f 91       	pop	r21
 1da:	4f 91       	pop	r20
 1dc:	3f 91       	pop	r19
 1de:	2f 91       	pop	r18
 1e0:	0f 90       	pop	r0
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	0f 90       	pop	r0
 1e6:	1f 90       	pop	r1
 1e8:	18 95       	reti

000001ea <__vector_5>:
 1ea:	1f 92       	push	r1
 1ec:	0f 92       	push	r0
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	0f 92       	push	r0
 1f2:	11 24       	eor	r1, r1
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
 20c:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <pvTimerCallback>
 210:	f0 91 7f 00 	lds	r31, 0x007F	; 0x80007f <pvTimerCallback+0x1>
 214:	09 95       	icall
 216:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <sReload>
 21a:	82 bf       	out	0x32, r24	; 50
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <main>:



int main(void)
{
	SwitchInit( &sKey , &KEY_PORT , 1<<KEY_BP , 1<<KEY_BP , 0 );
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	20 e1       	ldi	r18, 0x10	; 16
 242:	40 e1       	ldi	r20, 0x10	; 16
 244:	68 e3       	ldi	r22, 0x38	; 56
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	86 e9       	ldi	r24, 0x96	; 150
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	b9 d0       	rcall	.+370    	; 0x3c0 <SwitchInit>

	#if defined( __AVR_ATmega328P__ ) || defined( __AVR_ATmega32__ ) || defined( __AVR_ATtiny13A__ ) || defined( __AVR_ATtiny85__ )

		extern inline enum eTimerError Timer0CompAInit	( const sTimer8Config_t *psTab , void (*pFncCallback)(void) )	
		{
			cli(); /**< Vorsichtshalber Interrupts global sperren */
 24e:	f8 94       	cli
			{
				sei();
				return ERROR_TIMER_NO_ADDRESS;
			}else
			{
				pvTimerCallback[CALLBACK_TIMER0_COMPA] = pFncCallback;
 250:	8b e2       	ldi	r24, 0x2B	; 43
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <pvTimerCallback+0x3>
 258:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <pvTimerCallback+0x2>
				TCCR1B_WGM_CS( psTab->uiWGMxx , psTab->uiCSxx );
				OCR0A = psTab->uiCnt;
				TIMSK0_OCIE0A_EN;
			#endif
	
			sei();
 25c:	78 94       	sei
	
	Timer0CompAInit( &sTimer0OcieSettings[2] , Timer1ms );

	for ( uint8_t x = 0 ; x < 8 ; x++ )
 25e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		ShiftRegSetBit( x ); // Initalisieren
 260:	8c 2f       	mov	r24, r28
 262:	75 d0       	rcall	.+234    	; 0x34e <ShiftRegSetBit>
{
	SwitchInit( &sKey , &KEY_PORT , 1<<KEY_BP , 1<<KEY_BP , 0 );
	
	Timer0CompAInit( &sTimer0OcieSettings[2] , Timer1ms );

	for ( uint8_t x = 0 ; x < 8 ; x++ )
 264:	cf 5f       	subi	r28, 0xFF	; 255
 266:	c8 30       	cpi	r28, 0x08	; 8
 268:	d9 f7       	brne	.-10     	; 0x260 <__stack+0x1>
		ShiftRegSetBit( x ); // Initalisieren
	}

    while (1) 
    {
		if ( SwitchGet( &sKey , 1<<KEY_BP ) )
 26a:	60 e1       	ldi	r22, 0x10	; 16
 26c:	86 e9       	ldi	r24, 0x96	; 150
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	ea d0       	rcall	.+468    	; 0x446 <SwitchGet>
 272:	88 23       	and	r24, r24
 274:	51 f0       	breq	.+20     	; 0x28a <__stack+0x2b>
		{
			if ( uiLedCnfgIndex++ > 6 )
 276:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <uiLedCnfgIndex>
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	98 0f       	add	r25, r24
 27e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <uiLedCnfgIndex>
 282:	87 30       	cpi	r24, 0x07	; 7
 284:	10 f0       	brcs	.+4      	; 0x28a <__stack+0x2b>
			{
				uiLedCnfgIndex = 0;
 286:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <uiLedCnfgIndex>
			}
		}
		
		static uint8_t uiIndex = 0;
		
		if ( sTime.uiMilli > 250 )
 28a:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <sTime>
 28e:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <sTime+0x1>
 292:	8b 3f       	cpi	r24, 0xFB	; 251
 294:	91 05       	cpc	r25, r1
 296:	48 f3       	brcs	.-46     	; 0x26a <__stack+0xb>
		{
			sTime.uiMilli = 0;
 298:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <sTime+0x1>
 29c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <sTime>
			
			if ( uiIndex++ < 8 )
 2a0:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__data_end>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	89 0f       	add	r24, r25
 2a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
 2ac:	98 30       	cpi	r25, 0x08	; 8
 2ae:	18 f4       	brcc	.+6      	; 0x2b6 <__stack+0x57>
			{
				ShiftRegSetBit( uiIndex & 0x08 ); // Led x an
 2b0:	88 70       	andi	r24, 0x08	; 8
 2b2:	4d d0       	rcall	.+154    	; 0x34e <ShiftRegSetBit>
 2b4:	da cf       	rjmp	.-76     	; 0x26a <__stack+0xb>
			}
			else
			{
				uiIndex = 0;
 2b6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__data_end>
				ShiftRegSet( 0x00 , eSHIFT_REG_1 );
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	60 d0       	rcall	.+192    	; 0x380 <ShiftRegSet>
 2c0:	d4 cf       	rjmp	.-88     	; 0x26a <__stack+0xb>

000002c2 <ShiftRegSend>:
    }

    pShiftReg[uiNumOfReg] &= ~( 1 << uiBitOfReg );

    return eState;
}
 2c2:	dc 01       	movw	r26, r24
 2c4:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 2c8:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 2cc:	80 81       	ld	r24, Z
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	80 83       	st	Z, r24
 2d2:	61 11       	cpse	r22, r1
 2d4:	37 c0       	rjmp	.+110    	; 0x344 <ShiftRegSend+0x82>
 2d6:	39 c0       	rjmp	.+114    	; 0x34a <ShiftRegSend+0x88>
 2d8:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 2dc:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 2e0:	20 81       	ld	r18, Z
 2e2:	2b 7f       	andi	r18, 0xFB	; 251
 2e4:	20 83       	st	Z, r18
 2e6:	11 96       	adiw	r26, 0x01	; 1
 2e8:	2c 91       	ld	r18, X
 2ea:	11 97       	sbiw	r26, 0x01	; 1
 2ec:	22 23       	and	r18, r18
 2ee:	41 f0       	breq	.+16     	; 0x300 <ShiftRegSend+0x3e>
 2f0:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 2f4:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 2f8:	20 81       	ld	r18, Z
 2fa:	28 60       	ori	r18, 0x08	; 8
 2fc:	20 83       	st	Z, r18
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <ShiftRegSend+0x4c>
 300:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 304:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 308:	20 81       	ld	r18, Z
 30a:	27 7f       	andi	r18, 0xF7	; 247
 30c:	20 83       	st	Z, r18
 30e:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 312:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 316:	20 81       	ld	r18, Z
 318:	2b 7f       	andi	r18, 0xFB	; 251
 31a:	20 83       	st	Z, r18
 31c:	91 50       	subi	r25, 0x01	; 1
 31e:	e1 f6       	brne	.-72     	; 0x2d8 <ShiftRegSend+0x16>
 320:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 324:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 328:	90 81       	ld	r25, Z
 32a:	92 60       	ori	r25, 0x02	; 2
 32c:	90 83       	st	Z, r25
 32e:	e0 91 79 00 	lds	r30, 0x0079	; 0x800079 <sShiftPort>
 332:	f0 91 7a 00 	lds	r31, 0x007A	; 0x80007a <sShiftPort+0x1>
 336:	90 81       	ld	r25, Z
 338:	9d 7f       	andi	r25, 0xFD	; 253
 33a:	90 83       	st	Z, r25
 33c:	8f 5f       	subi	r24, 0xFF	; 255
 33e:	68 13       	cpse	r22, r24
 340:	02 c0       	rjmp	.+4      	; 0x346 <ShiftRegSend+0x84>
 342:	03 c0       	rjmp	.+6      	; 0x34a <ShiftRegSend+0x88>
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	98 e0       	ldi	r25, 0x08	; 8
 348:	c7 cf       	rjmp	.-114    	; 0x2d8 <ShiftRegSend+0x16>
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	08 95       	ret

0000034e <ShiftRegSetBit>:
 34e:	38 2f       	mov	r19, r24
 350:	36 95       	lsr	r19
 352:	36 95       	lsr	r19
 354:	36 95       	lsr	r19
 356:	e3 2f       	mov	r30, r19
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	e6 57       	subi	r30, 0x76	; 118
 35c:	ff 4f       	sbci	r31, 0xFF	; 255
 35e:	28 2f       	mov	r18, r24
 360:	27 70       	andi	r18, 0x07	; 7
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <ShiftRegSetBit+0x1e>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	2a 95       	dec	r18
 36e:	e2 f7       	brpl	.-8      	; 0x368 <ShiftRegSetBit+0x1a>
 370:	90 81       	ld	r25, Z
 372:	89 2b       	or	r24, r25
 374:	80 83       	st	Z, r24
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	32 30       	cpi	r19, 0x02	; 2
 37a:	08 f4       	brcc	.+2      	; 0x37e <ShiftRegSetBit+0x30>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	08 95       	ret

00000380 <ShiftRegSet>:
    if ( eMember > __MAX_eSHIFT_ENTRYS__ )
    {
        eState = eSHIFT_REG_OUT_OF_RANGE;
    }

    pShiftReg[eMember] = uiValue;
 380:	e8 2f       	mov	r30, r24
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	e6 57       	subi	r30, 0x76	; 118
 386:	ff 4f       	sbci	r31, 0xFF	; 255
 388:	60 83       	st	Z, r22

    return eState;
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	82 30       	cpi	r24, 0x02	; 2
 38e:	08 f4       	brcc	.+2      	; 0x392 <ShiftRegSet+0x12>
 390:	90 e0       	ldi	r25, 0x00	; 0
}
 392:	89 2f       	mov	r24, r25
 394:	08 95       	ret

00000396 <ShiftRegGet>:

sShiftRegInfo_t ShiftRegGet( enum eShiftRegs eMember )
{
    sShiftRegInfo_t sInfo;

    if ( ( eMember > __MAX_eSHIFT_ENTRYS__ ) || ( ( __MAX_eSHIFT_ENTRYS__ - eMember ) < 0 ) )
 396:	82 30       	cpi	r24, 0x02	; 2
 398:	38 f4       	brcc	.+14     	; 0x3a8 <ShiftRegGet+0x12>
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	42 1b       	sub	r20, r18
 3a4:	53 0b       	sbc	r21, r19
 3a6:	22 f4       	brpl	.+8      	; 0x3b0 <ShiftRegGet+0x1a>
    {
        sInfo.pRegStart = NULL;
        sInfo.uiLeftRegs = 0;
        return sInfo;
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	70 e0       	ldi	r23, 0x00	; 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret
    }

    sInfo.uiLeftRegs = __MAX_eSHIFT_ENTRYS__ - eMember;
    sInfo.pRegStart = &pShiftReg[eMember];
 3b0:	26 57       	subi	r18, 0x76	; 118
 3b2:	3f 4f       	sbci	r19, 0xFF	; 255

    return sInfo;
 3b4:	62 2f       	mov	r22, r18
 3b6:	73 2f       	mov	r23, r19
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	98 1b       	sub	r25, r24
 3bc:	89 2f       	mov	r24, r25
}
 3be:	08 95       	ret

000003c0 <SwitchInit>:
	uiKeyMask &= psSwitch->uiRepeat;
	psSwitch->uiRepeat ^= uiKeyMask;
	sei();

	return uiKeyMask;
}
 3c0:	0f 93       	push	r16
 3c2:	fc 01       	movw	r30, r24
 3c4:	61 15       	cp	r22, r1
 3c6:	71 05       	cpc	r23, r1
 3c8:	a1 f0       	breq	.+40     	; 0x3f2 <SwitchInit+0x32>
 3ca:	db 01       	movw	r26, r22
 3cc:	8e 91       	ld	r24, -X
 3ce:	94 2f       	mov	r25, r20
 3d0:	90 95       	com	r25
 3d2:	89 23       	and	r24, r25
 3d4:	8c 93       	st	X, r24
 3d6:	db 01       	movw	r26, r22
 3d8:	8c 91       	ld	r24, X
 3da:	28 2b       	or	r18, r24
 3dc:	2c 93       	st	X, r18
 3de:	71 83       	std	Z+1, r23	; 0x01
 3e0:	60 83       	st	Z, r22
 3e2:	45 83       	std	Z+5, r20	; 0x05
 3e4:	13 82       	std	Z+3, r1	; 0x03
 3e6:	12 82       	std	Z+2, r1	; 0x02
 3e8:	14 82       	std	Z+4, r1	; 0x04
 3ea:	16 82       	std	Z+6, r1	; 0x06
 3ec:	07 83       	std	Z+7, r16	; 0x07
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	01 c0       	rjmp	.+2      	; 0x3f4 <SwitchInit+0x34>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0f 91       	pop	r16
 3f6:	08 95       	ret

000003f8 <SwitchRead>:
 3f8:	fc 01       	movw	r30, r24
 3fa:	a0 81       	ld	r26, Z
 3fc:	b1 81       	ldd	r27, Z+1	; 0x01
 3fe:	12 97       	sbiw	r26, 0x02	; 2
 400:	8c 91       	ld	r24, X
 402:	80 95       	com	r24
 404:	95 81       	ldd	r25, Z+5	; 0x05
 406:	89 23       	and	r24, r25
 408:	82 83       	std	Z+2, r24	; 0x02
 40a:	93 81       	ldd	r25, Z+3	; 0x03
 40c:	89 17       	cp	r24, r25
 40e:	41 f0       	breq	.+16     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 410:	90 95       	com	r25
 412:	98 23       	and	r25, r24
 414:	24 81       	ldd	r18, Z+4	; 0x04
 416:	92 2b       	or	r25, r18
 418:	94 83       	std	Z+4, r25	; 0x04
 41a:	94 e6       	ldi	r25, 0x64	; 100
 41c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <uiRepeat>
 420:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <uiRepeat>
 424:	91 50       	subi	r25, 0x01	; 1
 426:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <uiRepeat>
 42a:	91 11       	cpse	r25, r1
 42c:	09 c0       	rjmp	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42e:	97 81       	ldd	r25, Z+7	; 0x07
 430:	98 23       	and	r25, r24
 432:	31 f0       	breq	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 434:	25 e0       	ldi	r18, 0x05	; 5
 436:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <uiRepeat>
 43a:	26 81       	ldd	r18, Z+6	; 0x06
 43c:	92 2b       	or	r25, r18
 43e:	96 83       	std	Z+6, r25	; 0x06
 440:	83 83       	std	Z+3, r24	; 0x03
 442:	84 81       	ldd	r24, Z+4	; 0x04
 444:	08 95       	ret

00000446 <SwitchGet>:

uint8_t SwitchGet( sSwitch_t *psSwitch , uint8_t uiKeyMask )
{
 446:	fc 01       	movw	r30, r24
	uint8_t uiInfo;
	
	cli();
 448:	f8 94       	cli
	uiInfo = psSwitch->uiInfo;
 44a:	84 81       	ldd	r24, Z+4	; 0x04
	psSwitch->uiInfo &= ~uiKeyMask;
 44c:	96 2f       	mov	r25, r22
 44e:	90 95       	com	r25
 450:	98 23       	and	r25, r24
 452:	94 83       	std	Z+4, r25	; 0x04
	sei();
 454:	78 94       	sei
	
	return ( uiInfo & uiKeyMask );
}
 456:	86 23       	and	r24, r22
 458:	08 95       	ret

0000045a <_exit>:
 45a:	f8 94       	cli

0000045c <__stop_program>:
 45c:	ff cf       	rjmp	.-2      	; 0x45c <__stop_program>
